#!/usr/bin/env perl
# --- [port] # default port is 3100

package MiniCGIWebServer;
use base qw(HTTP::Server::Simple HTTP::Server::Simple::CGI::Environment);

use strict; use warnings; no warnings 'uninitialized';
use Data::Dumper;
use File::Basename;
use LWP::MediaTypes qw(guess_media_type);
use IPC::Run;
use Cwd;

# use HTTP::Server::Simple;
use IO::File;

sub setup {
    my $self=shift;
    local %ENV=();
    $self->setup_environment_from_metadata(@_);
    $self->{'env'} = \%ENV;
    }

sub handler {
    my $self=shift;

    my $static = "static".$self->{'env'}->{'PATH_INFO'};
    if (-f $static) {
        warn "Deliver static: $static";
        print "HTTP/1.0 200 OK\r\n";
        print "Content-Length: ".(-s $static)."\r\n";
        print "Content-type: ".guess_media_type($static)."\r\n";
        print "\r\n";
        my $sh = IO::File->new("<$static") || die "Can't read $static: $!"; 
        while (<$sh>) { print $_ };
        return;
        }

    my @candidates = `find cgi -type f -perm -u+x`;
    if (@candidates == 0) {
        warn "Nothing executable in cgi/";
        print "Nothing executable in cgi/\n";
        }
    elsif (@candidates == 1) {
        my $to_run = $candidates[0];
        chomp $to_run;
        my $dir = dirname($to_run);
        my $bin = basename($to_run);
        warn "Running $to_run";

        local %ENV = %{$self->{'env'}};

        my $cgi_pid;
        my $fh;
        if (1 || exists $ENV{'CONTENT_LENGTH'}) {
            # You like this? Attaching the "real" stidin (the browser submit) to the "real" cgi
            my $from_browser = $self->stdin_handle();
            my $was = cwd();
            sysread( STDIN, my $fdata, $ENV{'CONTENT_LENGTH'}  || 0);
            chdir $dir;
            IPC::Run::run ["./$bin"], '<', \$fdata, '>pipe', \*CGI_OUT;
            chdir $was;
            $fh = \*CGI_OUT;
            }
        else {
            warn "just read from $bin";
            $fh = IO::File->new("cd $dir; ./$bin |");

            if (!$fh) {
                warn "Failed to run $to_run: $!";
                return;
                }
            }

        # collect headers, synthesize the HTTP line
        my @headers;
        my %status = ( 'Status:' => 200, 'Status-message:' => 'OK' );
        while (<$fh>) { 
            last if (/^$/);
            if (/^(Status:|Status-message:) (.+)/) {
                $status{$1} = $2;
                next;
                }
            push @headers, $_;
            };
        print "HTTP/1.0 ".$status{'Status:'}." ".$status{'Status-message:'}."\r\n";
        print @headers;

        while (<$fh>) { print $_ };
        $fh->close && warn "Failed to run $to_run; $?: $!";
        waitpid($cgi_pid, 0) if $cgi_pid;
        }
    else {
        die "More than one runnable";
        }
    }

sub headers {
    my $self=shift;

    local %ENV = %{$self->{'env'}};
    $self->SUPER::headers(@_);
    $self->{'env'} = {%ENV};
    }

###

my $server = MiniCGIWebServer->new($ARGV[0] || 3100);
$server->run();
